swagger: "2.0"
info:
  description: "WM Tippspiel"
  version: "1.0.0"
  title: "WM Tippspiel"
host: "wodss-tippspiel-api.herokuapp.com"
tags:
- name: "meta"
  description: "Operations about auth"
- name: "auth"
  description: "Operations about auth"
- name: "users"
  description: "Operations about user"
- name: "teams"
  description: "Operations about team"
- name: "games"
  description: "Operations about games"
- name: "ranking"
  description: "Operations about rankings"
- name: "static"
  description: "Static data enpoints"
schemes:
- "https"
securityDefinitions:
  basicAuth:
    type: basic
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:
  /api:
    get:
      tags:
      - "meta"
      summary: "Returns information of the api"
      description: ""
      operationId: "apiInfo"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiInfo"
  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Registers a new user"
      description: ""
      operationId: "registerUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/NewUser"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Invalid credentials"
  /auth/login:
    post:
      security:
        - basicAuth: []
      tags:
      - "auth"
      summary: "Login a user"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login response object"
        required: true
        schema:
          $ref: "#/definitions/LoginResponse"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          description: "Invalid credentials"
  /auth/logout:
    post:
      security:
        - bearerAuth: []
      tags:
      - "auth"
      summary: "Logout a user"
      description: ""
      operationId: "logoutUser"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Invalid credentials"
  /auth/reset:
    put:
      tags:
      - "auth"
      summary: "Request to reset password of the given user(email)"
      description: ""
      operationId: "requestToResetPassword"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Reset body"
        required: true
        schema:
          type: object
          required:
          - email
          - host
          properties:
            email:
              type: string
            host:
              type: string
              description: "Path to the used frontend appplication(including protocol)"
      responses:
        200:
          description: "Successful operation"
  /auth/reset/{resetToken}:
    put:
      tags:
      - "auth"
      summary: "Reset password of the given user"
      description: ""
      operationId: "resetPassword"
      produces:
      - "application/json"
      parameters:
      - name: "resetToken"
        in: "path"
        description: "Token to reset the password"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Password"
        required: true
        schema:
          type: object
          required:
          - password
          properties:
            password:
              type: string
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid password credentials"
  /auth/verify/{verifyToken}:
    put:
      tags:
      - "auth"
      summary: "Verifies the user using the email address"
      description: ""
      operationId: "verifyEmail"
      produces:
      - "application/json"
      parameters:
      - name: "verifyToken"
        in: "path"
        description: "Token to verify the email and the user"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid verify token"
  /users/me:
    get:
      security:
        - bearerAuth: []
      tags:
      - "users"
      summary: "Returns the currently logged in user"
      description: ""
      operationId: "getMe"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Invalid credentials"
    put:
      security:
        - bearerAuth: []
      tags:
      - "users"
      summary: "Update user"
      description: ""
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
        401:
          description: "Invalid credentials"
        403:
          description: "Only the logged in user can modify himself"
  /users/me/teams:
    get:
      security:
        - bearerAuth: []
      tags:
      - "users"
      summary: "Returns the teams of the current user"
      description: ""
      operationId: "getTeamsOfMe"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Team"
        401:
          description: "Invalid credentials"
  /users/{username}/games:
    get:
      security:
        - bearerAuth: []
      tags:
      - "users"
      summary: "Returns the games with the tips of the user"
      description: ""
      operationId: "getUsersTipsByUsername"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TippedGame"
        401:
          description: "Invalid credentials"
        404:
          description: "User not found"
  /teams:
    post:
      security:
        - bearerAuth: []
      tags:
      - "teams"
      summary: "Creates a new team and sets the current user as the owner"
      operationId: "createTeam"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created team object"
        required: true
        schema:
          $ref: "#/definitions/NewTeam"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Invalid team supplied"
        404:
          description: "Not found"
        401:
          description: "Invalid credentials"
  /teams/{teamId}:
    get:
      security:
        - bearerAuth: []
      tags:
      - "teams"
      summary: "Returns the team with the given id"
      description: ""
      operationId: "getTeamById"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Team"
        401:
          description: "Invalid credentials"
        404:
          description: "Not found"
    put:
      security:
        - bearerAuth: []
      tags:
      - "teams"
      summary: "Update team"
      description: "Only the owner of the team can change the team"
      operationId: "updateTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated team object"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Invalid team supplied"
        404:
          description: "Not found"
        401:
          description: "Invalid credentials"
  /teams/{teamId}/ranking:
    get:
      security:
        - bearerAuth: []
      tags:
      - "teams"
      summary: "Returns a list of users with their rank and points"
      description: ""
      operationId: "getTeamRanking"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserRanking"
        401:
          description: "Invalid credentials"
        404:
          description: "Not found"
  /teams/{teamId}/user:
    get:
      security:
        - bearerAuth: []
      tags:
      - "teams"
      summary: "Returns the users of the team"
      description: ""
      operationId: "getTeammates"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "string"
      - name: "email"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TeamUser"
    post:
      security:
        - bearerAuth: []
      tags:
      - "teams"
      summary: "Creates a team invitation"
      description: "Only the owner of the team can invited other users by email"
      operationId: "inviteUserToTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "string"
      - name: "email"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid parameter supplied"
        404:
          description: "Not found"
        401:
          description: "Invalid credentials"
    put:
      security:
        - bearerAuth: []
      tags:
      - "teams"
      summary: "Adds a user to team"
      description: "Only the invited user can accept the invitation"
      operationId: "addUserToTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Invalid parameter supplied"
        404:
          description: "Not found"
        401:
          description: "Invalid credentials"
  /teams/{teamId}/user/{userId}:
    delete:
      security:
        - bearerAuth: []
      tags:
      - "teams"
      summary: "Remove user from team"
      description: "Only the team owner has the permission to do that and the user who wants to remove himself. Moreover if there are not users left in a team then we have to drop it."
      operationId: "removeUserFromTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "Successfully removed user from the team"
        400:
          description: "Invalid parameter supplied"
        404:
          description: "Not found"
        401:
          description: "Invalid credentials"
  /games:
    post:
      security:
        - bearerAuth: []
      tags:
      - "games"
      summary: "Create a new game"
      description: "Only the admins can to that"
      operationId: "createGame"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Create a game object"
        required: true
        schema:
          $ref: "#/definitions/GameScore"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Game"
        401:
          description: "Invalid credentials"
        403:
          description: "Not allowed"
  /games/{gameId}:
    put:
      security:
        - bearerAuth: []
      tags:
      - "games"
      summary: "Update a game"
      description: "Only the admins can to that"
      operationId: "modifyGames"
      produces:
      - "application/json"
      parameters:
      - name: "gameId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated game object"
        required: true
        schema:
          $ref: "#/definitions/GameScore"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Game"
        401:
          description: "Invalid credentials"
        403:
          description: "Not allowed"
    delete:
      security:
        - bearerAuth: []
      tags:
      - "games"
      summary: "Delete a game"
      description: "Only the admins can to that"
      operationId: "deleteGames"
      produces:
      - "application/json"
      parameters:
      - name: "gameId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Invalid credentials"
        403:
          description: "Not allowed"
  /games/{gameId}/tip:
    put:
      security:
        - bearerAuth: []
      tags:
      - "games"
      summary: "Enter tip of game"
      description: "Only the current user can alter his bets"
      operationId: "tipGame"
      produces:
      - "application/json"
      parameters:
      - name: "gameId"
        in: "path"
        required: true
        type: "string"
      - name: "userId"
        in: "query"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/GameScore"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TippedGame"
        400:
          description: "Invalid tip"
        401:
          description: "Invalid credentials"
        404:
          description: "Not found"
  /ranking/users:
    get:
      security:
        - bearerAuth: []
      tags:
      - "ranking"
      summary: "Returns a list of users with their points"
      description: ""
      operationId: "getUsersRanking"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserRanking"
        401:
          description: "Invalid credentials"
  /ranking/teams:
    get:
      security:
        - bearerAuth: []
      tags:
      - "ranking"
      summary: "Returns a list of teams with their points"
      description: ""
      operationId: "getTeamsRanking"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TeamRanking"
        401:
          description: "Invalid credentials"
  /game-phases:
    get:
      security:
        - bearerAuth: []
      tags:
      - "static"
      summary: "Returns a list of phases"
      description: ""
      operationId: "getGamePhases"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GamePhase"
        401:
          description: "Invalid credentials"
  /locations:
    get:
      security:
        - bearerAuth: []
      tags:
      - "static"
      summary: "Returns a list of locations"
      description: ""
      operationId: "getLocations"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Location"
        401:
          description: "Invalid credentials"
  /nations:
    get:
      security:
        - bearerAuth: []
      tags:
      - "static"
      summary: "Returns a list of nations"
      description: ""
      operationId: "getNations"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Nation"
        401:
          description: "Invalid credentials"
definitions:
  ApiInfo:
    type: "object"
    properties:
      name:
        type: "string"
      version:
        type: "string"
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      expiration:
        type: "string"
  NewUser:
    type: "object"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      isAdmin:
        type: "boolean"
  UserRanking:
    type: "object"
    properties:
      rank:
        type: "integer"
        format: "int64"
      user:
        $ref: "#/definitions/User"
      points:
        type: "integer"
        format: "int64"
  NewTeam:
    type: "object"
    properties:
      name:
        type: "string"
  Team:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  TeamUser:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      owner:
        type: "boolean"
  TeamRanking:
    type: "object"
    properties:
      rank:
        type: "integer"
        format: "int64"
      team:
        $ref: "#/definitions/Team"
      points:
        type: "integer"
        format: "int64"
  Nation:
    type: "object"
    properties:
      id:
        type: "string"
      code:
        type: "string"
      name:
        type: "string"
      tournamentGroup:
        type: "string"
  Location:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      utcDiff:
        type: "integer"
        format: "int64"
  GamePhase:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Game:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date-time"
      phase:
        $ref: "#/definitions/GamePhase"
      location:
        $ref: "#/definitions/Location"
      host:
        $ref: "#/definitions/GameNation"
      guest:
        $ref: "#/definitions/GameNation"
  TippedGame:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date-time"
      phase:
        $ref: "#/definitions/GamePhase"
      location:
        $ref: "#/definitions/Location"
      host:
        $ref: "#/definitions/GameNation"
      guest:
        $ref: "#/definitions/GameNation"
      tip:
        $ref: "#/definitions/Tip"
  GameNation:
    type: "object"
    properties:
      nation:
        $ref: "#/definitions/Nation"
      score:
        type: "integer"
        format: "int64"
  GameScore:
    type: "object"
    properties:
      hostScore:
        type: "integer"
        format: "int64"
      guestScore:
        type: "integer"
        format: "int64"
  Tip:
    type: "object"
    properties:
      hostScore:
        type: "integer"
        format: "int64"
      guestScore:
        type: "integer"
        format: "int64"
      tippedHostScoreCorrectly:
        type: "boolean"
      tippedGuestScoreCorrectly:
        type: "boolean"
      tippedWinnerCorrectly:
        type: "boolean"
      tippedBalanceAndWinnerCorrectly:
        type: "boolean"
      points:
        type: "integer"
        format: "int64"
